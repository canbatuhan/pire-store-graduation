# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pire.modules.service.pirestore_pb2 as pirestore__pb2


class PireKeyValueStoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Greet = channel.unary_unary(
                '/pirestore.PireKeyValueStore/Greet',
                request_serializer=pirestore__pb2.Greeting.SerializeToString,
                response_deserializer=pirestore__pb2.WriteAck.FromString,
                )
        self.Create = channel.unary_unary(
                '/pirestore.PireKeyValueStore/Create',
                request_serializer=pirestore__pb2.WriteRequest.SerializeToString,
                response_deserializer=pirestore__pb2.WriteAck.FromString,
                )
        self.Read = channel.unary_unary(
                '/pirestore.PireKeyValueStore/Read',
                request_serializer=pirestore__pb2.ReadRequest.SerializeToString,
                response_deserializer=pirestore__pb2.ReadAck.FromString,
                )
        self.Update = channel.unary_unary(
                '/pirestore.PireKeyValueStore/Update',
                request_serializer=pirestore__pb2.WriteRequest.SerializeToString,
                response_deserializer=pirestore__pb2.WriteAck.FromString,
                )
        self.Delete = channel.unary_unary(
                '/pirestore.PireKeyValueStore/Delete',
                request_serializer=pirestore__pb2.WriteRequest.SerializeToString,
                response_deserializer=pirestore__pb2.WriteAck.FromString,
                )


class PireKeyValueStoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Greet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PireKeyValueStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Greet': grpc.unary_unary_rpc_method_handler(
                    servicer.Greet,
                    request_deserializer=pirestore__pb2.Greeting.FromString,
                    response_serializer=pirestore__pb2.WriteAck.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=pirestore__pb2.WriteRequest.FromString,
                    response_serializer=pirestore__pb2.WriteAck.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=pirestore__pb2.ReadRequest.FromString,
                    response_serializer=pirestore__pb2.ReadAck.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=pirestore__pb2.WriteRequest.FromString,
                    response_serializer=pirestore__pb2.WriteAck.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=pirestore__pb2.WriteRequest.FromString,
                    response_serializer=pirestore__pb2.WriteAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pirestore.PireKeyValueStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PireKeyValueStore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Greet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirestore.PireKeyValueStore/Greet',
            pirestore__pb2.Greeting.SerializeToString,
            pirestore__pb2.WriteAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirestore.PireKeyValueStore/Create',
            pirestore__pb2.WriteRequest.SerializeToString,
            pirestore__pb2.WriteAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirestore.PireKeyValueStore/Read',
            pirestore__pb2.ReadRequest.SerializeToString,
            pirestore__pb2.ReadAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirestore.PireKeyValueStore/Update',
            pirestore__pb2.WriteRequest.SerializeToString,
            pirestore__pb2.WriteAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pirestore.PireKeyValueStore/Delete',
            pirestore__pb2.WriteRequest.SerializeToString,
            pirestore__pb2.WriteAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
