syntax = "proto3";

package pirestore;

service PireStore {
    rpc Greet    (GreetProtocolMessage)    returns (Empty)       {}
    rpc Create   (WriteProtocolMessage)    returns (WriteAck)    {}
    rpc Read     (ReadProtocolMessage)     returns (ReadAck)     {}
    rpc Validate (ValidateProtocolMessage) returns (ValidateAck) {}
    rpc Update   (WriteProtocolMessage)    returns (WriteAck)    {}
    rpc Delete   (WriteProtocolMessage)    returns (WriteAck)    {}
}

/* Main Message Types */

message GreetProtocolMessage {
    Address sender = 1;
}

message Empty {
    // Empty body
}

/* Protocol Messages */

message WriteProtocolMessage {
    WritePayload  payload  = 1;
    WriteMetadata metadata = 2;
}

message ReadProtocolMessage {
    ReadPayload  payload  = 1;
    ReadMetadata metadata = 2;
}

message ValidateProtocolMessage {
    ValidatePayload payload = 1;
}

/* Acknowledgments */

message WriteAck {
    uint32           ack     = 1;
    repeated Address visited = 10;
}

message ReadAck {
    bool             success = 1;
    string           value   = 2;
    repeated Address visited = 10;
}

message ValidateAck {
    string value   = 1;
    uint32 version = 2;
}

/* Helper Message Types */

message Address {
    string host = 1;
    uint32 port = 2;
}

message WritePayload {
    string key   = 1;
    string value = 2;
}

message WriteMetadata {
    uint32           replica = 1;
    Address          sender  = 2;
    repeated Address visited = 10;
}

message ReadPayload {
    string key = 1;
}

message ReadMetadata {
    repeated Address visited = 1;
}

message ValidatePayload {
    string key     = 1;
    string value   = 2;
    uint32 version = 3;
}